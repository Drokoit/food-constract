const API_KEY = '43fc4171-9feb-433b-a328-477a7efd24c3';
const API_URL = 'http://lab8-api.std-900.ist.mospolytech.ru/labs/api/orders';
const DISHES_API_URL = 'https://edu.std-900.ist.mospolytech.ru/labs/api/dishes';
let allDishes = []; // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –±–ª—é–¥

document.addEventListener('DOMContentLoaded', async () => {
    await loadDishes(); // –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –±–ª—é–¥–∞
    loadOrders();
    setupModalListeners();
});

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ –±–ª—é–¥
async function loadDishes() {
    try {
        const response = await fetch(DISHES_API_URL);
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –±–ª—é–¥');
        }
        allDishes = await response.json();
    } catch (error) {
        showNotification(error.message, 'error');
    }
}

async function loadOrders() {
    try {
        const response = await fetch(`${API_URL}?api_key=${API_KEY}`);
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤');
        }
        const orders = await response.json();
        displayOrders(orders.sort((a, b) => new Date(b.created_at) - new Date(a.created_at)));
    } catch (error) {
        showNotification(error.message, 'error');
    }
}

function displayOrders(orders) {
    const tbody = document.getElementById('ordersTableBody');
    tbody.innerHTML = '';

    orders.forEach((order, index) => {
        const tr = document.createElement('tr');
        tr.innerHTML = `
            <td>${index + 1}</td>
            <td>${formatDate(order.created_at)}</td>
            <td>${formatOrderItems(order)}</td>
            <td>${calculateTotal(order)}‚ÇΩ</td>
            <td>${formatDeliveryTime(order)}</td>
            <td class="action-buttons">
                <button onclick="showOrderDetails(${order.id})">üëÅÔ∏è</button>
                <button onclick="showEditOrder(${order.id})">‚úèÔ∏è</button>
                <button onclick="showDeleteConfirmation(${order.id})">üóëÔ∏è</button>
            </td>
        `;
        tbody.appendChild(tr);
    });
}

function formatDate(dateString) {
    if (!dateString) return '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞';
    const date = new Date(dateString);
    return date.toLocaleString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    });
}

function formatOrderItems(order) {
    const items = [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ç–∏–ø –±–ª—é–¥–∞ –∏ –Ω–∞—Ö–æ–¥–∏–º –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ
    const orderItems = {
        soup_id: order.soup_id,
        main_course_id: order.main_course_id,
        salad_id: order.salad_id,
        drink_id: order.drink_id,
        dessert_id: order.dessert_id
    };

    // –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ ID –Ω–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –±–ª—é–¥–æ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ
    for (const [key, id] of Object.entries(orderItems)) {
        if (id) {
            const dish = allDishes.find(dish => dish.id === parseInt(id));
            if (dish) {
                items.push(dish.name);
            }
        }
    }

    return items.join(', ') || '–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –±–ª—é–¥';
}

function calculateTotal(order) {
    let total = 0;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ç–∏–ø –±–ª—é–¥–∞
    const orderItems = {
        soup_id: order.soup_id,
        main_course_id: order.main_course_id,
        salad_id: order.salad_id,
        drink_id: order.drink_id,
        dessert_id: order.dessert_id
    };

    // –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ ID –Ω–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –±–ª—é–¥–æ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ —Ü–µ–Ω—É
    for (const [key, id] of Object.entries(orderItems)) {
        if (id) {
            const dish = allDishes.find(dish => dish.id === parseInt(id));
            if (dish) {
                total += dish.price;
            }
        }
    }

    return total;
}

function formatDeliveryTime(order) {
    return order.delivery_type === 'by_time' 
        ? order.delivery_time 
        : '–í —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è (—Å 7:00 –¥–æ 23:00)';
}

async function showOrderDetails(orderId) {
    try {
        const response = await fetch(`${API_URL}/${orderId}?api_key=${API_KEY}`);
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞');
        const order = await response.json();

        const modal = document.getElementById('orderDetailsModal');
        const content = document.getElementById('orderDetailsContent');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ç–∫—É —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        content.innerHTML = `
            <div>
                <strong>–î–∞—Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è</strong>
                <p>${formatDate(order.created_at)}</p>
            </div>
            
            <h3 class="order-details">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ</h3>
            <div>
                <strong>–ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è</strong>
                <p>${order.full_name}</p>
            </div>
            <div>
                <strong>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</strong>
                <p>${order.delivery_address}</p>
            </div>
            <div>
                <strong>–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏</strong>
                <p>${formatDeliveryTime(order)}</p>
            </div>
            <div>
                <strong>–¢–µ–ª–µ—Ñ–æ–Ω</strong>
                <p>${order.phone}</p>
            </div>
            <div>
                <strong>Email</strong>
                <p>${order.email}</p>
            </div>
            
            <h4>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</h4>
            <p>${order.comment || '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}</p>
            
            <h4>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞</h4>
            ${formatDetailedOrderItems(order)}
            
            <div>
                <strong>–°—Ç–æ–∏–º–æ—Å—Ç—å: ${calculateTotal(order)}‚ÇΩ</strong>
            </div>
        `;
        modal.style.display = 'block';
    } catch (error) {
        showNotification(error.message, 'error');
    }
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–∞–≤–∞ –∑–∞–∫–∞–∑–∞
function formatDetailedOrderItems(order) {
    const items = [];
    const orderItems = {
        soup_id: { id: order.soup_id, label: '–°—É–ø' },
        main_course_id: { id: order.main_course_id, label: '–û—Å–Ω–æ–≤–Ω–æ–µ –±–ª—é–¥–æ' },
        salad_id: { id: order.salad_id, label: '–°–∞–ª–∞—Ç' },
        drink_id: { id: order.drink_id, label: '–ù–∞–ø–∏—Ç–æ–∫' },
        dessert_id: { id: order.dessert_id, label: '–î–µ—Å–µ—Ä—Ç' }
    };

    for (const [key, value] of Object.entries(orderItems)) {
        if (value.id) {
            const dish = allDishes.find(dish => dish.id === parseInt(value.id));
            if (dish) {
                items.push(`<div>
                    <strong>${dish.name}</strong>
                    <p>${dish.price}‚ÇΩ</p>
                </div>`);
            }
        }
    }

    return items.join('') || '<p>–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –±–ª—é–¥</p>';
}

async function showEditOrder(orderId) {
    try {
        const response = await fetch(`${API_URL}/${orderId}?api_key=${API_KEY}`);
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞');
        const order = await response.json();

        const form = document.getElementById('editOrderForm');
        form.innerHTML = `
            <input type="hidden" name="id" value="${order.id}">
            <div class="form-group">
                <label>–§–ò–û:</label>
                <input type="text" name="full_name" value="${order.full_name}" required>
            </div>
            <div class="form-group">
                <label>Email:</label>
                <input type="email" name="email" value="${order.email}" required>
            </div>
            <div class="form-group">
                <label>–¢–µ–ª–µ—Ñ–æ–Ω:</label>
                <input type="tel" name="phone" value="${order.phone}" required>
            </div>
            <div class="form-group">
                <label>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</label>
                <input type="text" name="delivery_address" value="${order.delivery_address}" required>
            </div>
            <div class="form-group">
                <label>–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:</label>
                <select name="delivery_type">
                    <option value="now" ${order.delivery_type === 'now' ? 'selected' : ''}>–ö–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ</option>
                    <option value="by_time" ${order.delivery_type === 'by_time' ? 'selected' : ''}>–ö —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏</option>
                </select>
            </div>
            <div class="form-group" id="timeGroup" style="display: ${order.delivery_type === 'by_time' ? 'block' : 'none'}">
                <label>–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:</label>
                <input type="time" name="delivery_time" value="${order.delivery_time || ''}" min="07:00" max="23:00">
            </div>
            <div class="form-group">
                <label>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</label>
                <textarea name="comment">${order.comment || ''}</textarea>
            </div>
        `;

        const modal = document.getElementById('orderEditModal');
        modal.style.display = 'block';

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
        const deliveryTypeSelect = form.querySelector('[name="delivery_type"]');
        const timeGroup = form.querySelector('#timeGroup');
        deliveryTypeSelect.addEventListener('change', (e) => {
            timeGroup.style.display = e.target.value === 'by_time' ? 'block' : 'none';
        });
    } catch (error) {
        showNotification(error.message, 'error');
    }
}

function showDeleteConfirmation(orderId) {
    const modal = document.getElementById('orderDeleteModal');
    modal.dataset.orderId = orderId;
    modal.style.display = 'block';
}

function setupModalListeners() {
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    document.querySelectorAll('.modal .close, .modal .cancel-button, .modal .ok-button').forEach(element => {
        element.addEventListener('click', () => {
            document.querySelectorAll('.modal').forEach(modal => modal.style.display = 'none');
        });
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    document.querySelector('#orderEditModal .save-button').addEventListener('click', async () => {
        const form = document.getElementById('editOrderForm');
        const formData = new FormData(form);
        const orderId = formData.get('id');

        try {
            const response = await fetch(`${API_URL}/${orderId}?api_key=${API_KEY}`, {
                method: 'PUT',
                body: formData
            });

            if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π');

            showNotification('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
            document.getElementById('orderEditModal').style.display = 'none';
            loadOrders();
        } catch (error) {
            showNotification(error.message, 'error');
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
    document.querySelector('#orderDeleteModal .delete-button').addEventListener('click', async () => {
        const modal = document.getElementById('orderDeleteModal');
        const orderId = modal.dataset.orderId;

        try {
            const response = await fetch(`${API_URL}/${orderId}?api_key=${API_KEY}`, {
                method: 'DELETE'
            });

            if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞');

            showNotification('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
            modal.style.display = 'none';
            loadOrders();
        } catch (error) {
            showNotification(error.message, 'error');
        }
    });
}

function showNotification(message, type = 'success') {
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    document.body.appendChild(notification);

    setTimeout(() => {
        notification.remove();
    }, 3000);
} 